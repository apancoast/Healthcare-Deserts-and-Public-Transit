version: 2
models:
  - name: stg_gtfs__calendar
    data_tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - service_id
            - service_date
    columns:
      - name: service_id
        type: primary_key
        description: Identifies a set of dates when a service exception occurs for one or more routes. Each (service_id, date) pair may only appear once in calendar_dates.txt if using calendar.txt and calendar_dates.txt in conjunction. If a service_id value appears in both calendar.txt and calendar_dates.txt, the information in calendar_dates.txt modifies the service information specified in calendar.txt.
        data_tests:
          - not_null
      - name: service_date
        description: Date when service exception occurs.
      - name: exception_type
        description: 'Indicates whether service is available on the date specified in the date field. Valid options are: 1 - Service has been added for the specified date.2 - Service has been removed for the specified date.Example: Suppose a route has one set of trips available on holidays and another set of trips available on all other days. One service_id could correspond to the regular service schedule and another service_id could correspond to the holiday schedule. For a particular holiday, the calendar_dates.txt file could be used to add the holiday to the holiday service_id and to remove the holiday from the regular service_id schedule.'
      - name: exception_type_desc
        description: A descriptive text of the exception_type.
  - name: stg_gtfs__routes
    columns:
      - name: route_id
        description: Identifies a route.
        type: primary_key
        data_tests:
          - unique
          - not_null
      - name: route_short_name
        description: Short name of a route. Often a short, abstract identifier (e.g., "32", "100X", "Green") that riders use to identify a route. Both route_short_name and route_long_name may be defined.Conditionally Required:- Required if routes.route_long_name is empty.- Recommended if there is a brief service designation. This should be the commonly-known passenger name of the service, and should be no longer than 12 characters.
      - name: route_long_name
        description: Full name of a route. This name is generally more descriptive than the route_short_name and often includes the route's destination or stop. Both route_short_name and route_long_name may be defined.Conditionally Required:- Required if routes.route_short_name is empty.- Optional otherwise.
      - name: route_type
        description: 'Indicates the type of transportation used on a route. Valid options are: 0 - Tram, Streetcar, Light rail. Any light rail or street level system within a metropolitan area.1 - Subway, Metro. Any underground rail system within a metropolitan area.2 - Rail. Used for intercity or long-distance travel.3 - Bus. Used for short- and long-distance bus routes.4 - Ferry. Used for short- and long-distance boat service.5 - Cable tram. Used for street-level rail cars where the cable runs beneath the vehicle (e.g., cable car in San Francisco).6 - Aerial lift, suspended cable car (e.g., gondola lift, aerial tramway). Cable transport where cabins, cars, gondolas or open chairs are suspended by means of one or more cables.7 - Funicular. Any rail system designed for steep inclines.11 - Trolleybus. Electric buses that draw power from overhead wires using poles.12 - Monorail. Railway in which the track consists of a single rail or a beam.'
      - name: route_type_desc
        description: A descriptive text of the route_type.
  - name: stg_gtfs__shapes
    data_tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - shape_id
            - shape_pt_lat
            - shape_pt_lon
            - shape_pt_sequence
    columns:
      - name: shape_id
        type: primary_key
        data_tests:
          - not_null
        description: Identifies a shape.
      - name: shape_pt_lat
        description: Latitude of a shape point. Each record in shapes.txt represents a shape point used to define the shape.
      - name: shape_pt_lon
        description: Longitude of a shape point.
      - name: shape_pt_sequence
        description: 'Sequence in which the shape points connect to form the shape. Values must increase along the trip but do not need to be consecutive.Example: If the shape "A_shp" has three points in its definition, the shapes.txt file might contain these records to define the shape:  shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence  A_shp,37.61956,-122.48161,0  A_shp,37.64430,-122.41070,6  A_shp,37.65863,-122.30839,11'
      - name: shape_dist_traveled
        description: 'Actual distance traveled along the shape from the first shape point to the point specified in this record. Used by trip planners to show the correct portion of the shape on a map. Values must increase along with shape_pt_sequence; they must not be used to show reverse travel along a route. Distance units must be consistent with those used in stop_times.txt.Recommended for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). If a vehicle retraces or crosses the route alignment at points in the course of a trip, shape_dist_traveled is important to clarify how portions of the points in shapes.txt line up correspond with records in stop_times.txt.Example: If a bus travels along the three points defined above for A_shp, the additional shape_dist_traveled values (shown here in kilometers) would look like this:  shape_id,shape_pt_lat,shape_pt_lon,shape_pt_sequence,shape_dist_traveledA_shp,37.61956,-122.48161,0,0A_shp,37.64430,-122.41070,6,6.8310  A_shp,37.65863,-122.30839,11,15.8765
          https://gtfs.org/assets/inlining.svg'
  - name: stg_gtfs__stops
    columns:
      - name: stop_id
        type: primary_key
        data_tests:
          - unique
          - not_null 
        description: 'Identifies a location: stop/platform, station, entrance/exit, generic node or boarding area (see location_type). ID must be unique across all stops.stop_id, locations.geojson id, and location_groups.location_group_id values. Multiple routes may use the same stop_id.'
      - name: stop_code
        description: Short text or a number that identifies the location for riders. These codes are often used in phone-based transit information systems or printed on signage to make it easier for riders to get information for a particular location. The stop_code may be the same as stop_id if it is public facing. This field should be left empty for locations without a code presented to riders.
      - name: stop_name
        description: "Name of the location. The stop_name should match the agency's rider-facing name for the location as printed on a timetable, published online, or represented on signage. For translations into other languages, use translations.txt.When the location is a boarding area (location_type=4), the stop_name should contains the name of the boarding area as displayed by the agency. It could be just one letter (like on some European intercity railway stations), or text like \u201CWheelchair boarding area\u201D (NYC\u2019s Subway) or \u201CHead of short trains\u201D (Paris\u2019 RER).Conditionally Required:- Required for locations which are stops (location_type=0), stations (location_type=1) or entrances/exits (location_type=2).- Optional for locations which are generic nodes (location_type=3) or boarding areas (location_type=4)."
      - name: stop_lat
        description: "Latitude of the location.For stops/platforms (location_type=0) and boarding area (location_type=4), the coordinates must be the ones of the bus pole \u2014 if exists \u2014 and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops). Conditionally Required:- Required for locations which are stops (location_type=0), stations (location_type=1) or entrances/exits (location_type=2).- Optional for locations which are generic nodes (location_type=3) or boarding areas (location_type=4)."
      - name: stop_lon
        description: "Longitude of the location.For stops/platforms (location_type=0) and boarding area (location_type=4), the coordinates must be the ones of the bus pole \u2014 if exists \u2014 and otherwise of where the travelers are boarding the vehicle (on the sidewalk or the platform, and not on the roadway or the track where the vehicle stops). Conditionally Required:- Required for locations which are stops (location_type=0), stations (location_type=1) or entrances/exits (location_type=2).- Optional for locations which are generic nodes (location_type=3) or boarding areas (location_type=4)."
      - name: location_type
        description: Location type. Valid options are:0 (or empty) - Stop (or Platform). A location where passengers board or disembark from a transit vehicle. Is called a platform when defined within a parent_station.1 - Station. A physical structure or area that contains one or more platform.2 - Entrance/Exit. A location where passengers can enter or exit a station from the street. If an entrance/exit belongs to multiple stations, it may be linked by pathways to both, but the data provider must pick one of them as parent.3 - Generic Node. A location within a station, not matching any other location_type, that may be used to link together pathways define in pathways.txt.4 - Boarding Area. A specific location on a platform, where passengers can board and/or alight vehicles.
      - name: location_type_desc
        description: A descriptive text of the location_type
      - name: parent_station
        type: foreign_key
        data_tests:
          - relationships:
              to: ref('stg_gtfs__stops')
              field: stop_id
        description: 'Defines hierarchy between the different locations defined in stops.txt. It contains the ID of the parent location, as followed:- Stop/platform (location_type=0): the parent_station field contains the ID of a station.- Station (location_type=1): this field must be empty.- Entrance/exit (location_type=2) or generic node (location_type=3): the parent_station field contains the ID of a station (location_type=1)- Boarding Area (location_type=4): the parent_station field contains ID of a platform.Conditionally Required:- Required for locations which are entrances (location_type=2), generic nodes (location_type=3) or boarding areas (location_type=4).- Optional for stops/platforms (location_type=0).- Forbidden for stations (location_type=1).'
  - name: stg_gtfs__stop_times
    columns:
      - name: trip_id
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_gtfs__trips')
              field: trip_id          
        description: Identifies a trip.
      - name: arrival_time
        description: "Arrival time at the stop (defined by stop_times.stop_id) for a specific trip (defined by stop_times.trip_id) in the time zone specified by agency.agency_timezone, not stops.stop_timezone. If there are not separate times for arrival and departure at a stop, arrival_time and departure_time should be the same. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS. If exact arrival and departure times (timepoint=1) are not available, estimated or interpolated arrival and departure times (timepoint=0) should be provided.Conditionally Required:- Required for the first and last stop in a trip (defined by stop_times.stop_sequence). - Required for timepoint=1.-\_Forbidden when start_pickup_drop_off_window or end_pickup_drop_off_window are defined.- Optional otherwise."
      - name: departure_time
        description: "Departure time from the stop (defined by stop_times.stop_id) for a specific trip (defined by stop_times.trip_id) in the time zone specified by agency.agency_timezone, not stops.stop_timezone.If there are not separate times for arrival and departure at a stop, arrival_time and departure_time should be the same. For times occurring after midnight on the service day, enter the time as a value greater than 24:00:00 in HH:MM:SS. If exact arrival and departure times (timepoint=1) are not available, estimated or interpolated arrival and departure times (timepoint=0) should be provided.Conditionally Required:- Required for timepoint=1.-\_Forbidden when start_pickup_drop_off_window or end_pickup_drop_off_window are defined.- Optional otherwise."
      - name: stop_id
        type: foreign_key
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_gtfs__stops')
              field: stop_id
        description: Identifies the serviced stop. All stops serviced during a trip must have a record in stop_times.txt. Referenced locations must be stops/platforms, i.e. their stops.location_type value must be 0 or empty. A stop may be serviced multiple times in the same trip, and multiple trips and routes may service the same stop.On-demand service using stops should be referenced in the sequence in which service is available at those stops. A data consumer should assume that travel is possible from one stop or location to any stop or location later in the trip, provided that the pickup/drop_off_type of each stop_time and the time constraints of each start/end_pickup_drop_off_window do not forbid it.Conditionally Required:- Required if stop_times.location_group_id AND stop_times.location_id are NOT defined.- Forbidden if stop_times.location_group_id or stop_times.location_id are defined.
      - name: stop_sequence
        description: 'Order of stops, location groups, or GeoJSON locations for a particular trip. The values must increase along the trip but do not need to be consecutive.Example: The first location on the trip could have a stop_sequence=1, the second location on the trip could have a stop_sequence=23, the third location could have a stop_sequence=40, and so on.  Travel within the same location group or GeoJSON location requires two records in stop_times.txt with the same location_group_id or location_id.'
      - name: pickup_type
        description: Indicates pickup method. Valid options are:0 or empty - Regularly scheduled pickup. 1 - No pickup available.2 - Must phone agency to arrange pickup.3 - Must coordinate with driver to arrange pickup.
      - name: pickup_type_desc
        description: A descriptive text of the pickup_type.
      - name: drop_off_type
        description: Indicates drop off method. Valid options are:0 or empty - Regularly scheduled drop off.1 - No drop off available.2 - Must phone agency to arrange drop off.3 - Must coordinate with driver to arrange drop off.
      - name: drop_off_type_desc
        description: A descriptive text of the drop_off_type.
      - name: timepoint
        description: Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:0 - Times are considered approximate. 1 - Times are considered exact.  All records of stop_times.txt with defined arrival or departure times should have timepoint values populated. If no timepoint values are provided, all times are considered exact.
  - name: stg_gtfs__trips
    columns:
      - name: route_id
        type: foreign_key
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_gtfs__routes')
              field: route_id
        description: Identifies a route.
      - name: service_id
        type: foreign_key
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_gtfs__calendar')
              field: service_id
        description: Identifies a set of dates when service is available for one or more routes.
      - name: trip_id
        type: primary_key
        data_tests:
          - unique
          - not_null
        description: Identifies a trip.
      - name: trip_headsign
        description: Text that appears on signage identifying the trip's destination to riders. This field is recommended for all services with headsign text displayed on the vehicle which may be used to distinguish amongst trips in a route. If the headsign changes during a trip, values for trip_headsign may be overridden by defining values in stop_times.stop_headsign for specific stop_times along the trip.
      - name: direction_id
        description: 'Indicates the direction of travel for a trip. This field should not be used in routing; it provides a way to separate trips by direction when publishing time tables. Valid options are: 0 - Travel in one direction (e.g. outbound travel).1 - Travel in the opposite direction (e.g. inbound travel).Example: The trip_headsign and direction_id fields may be used together to assign a name to travel in each direction for a set of trips. A trips.txt file could contain these records for use in time tables:  trip_id,...,trip_headsign,direction_id  1234,...,Airport,0  1505,...,Downtown,1'
      - name: direction_id_desc
        description: A descriptive text of the direction_id
      - name: block_id
        description: Identifies the block to which the trip belongs. A block consists of a single trip or many sequential trips made using the same vehicle, defined by shared service days and block_id. A block_id may have trips with different service days, making distinct blocks. See the example below. To provide in-seat transfers information, transfers of transfer_type 4 should be provided instead.
      - name: shape_id
        type: foreign_id
        data_tests:
          - not_null
          - relationships:
              to: ref('stg_gtfs__shapes')
              field: shape_id
        description: 'Identifies a geospatial shape describing the vehicle travel path for a trip. Conditionally Required: - Required if the trip has a continuous pickup or drop-off behavior defined either in routes.txt or in stop_times.txt. - Optional otherwise.'
